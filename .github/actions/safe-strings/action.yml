name: "Safe string generation"
description: "Convert a string into shortern and remove unsafe characters. If conditional_match is set and original equals this value then conditional_value is used for the outputs."
inputs:
  original:
    description: "Original string (such as branch name) to make safe for tag usage etc"
    required: true
  suffix:
    description: "Additional string at the end"
    default: ""
  conditional_match:
    description: "If the original string matches this value, then use the conditional_value directly."
    default: ""
  conditional_value:
    description: "When original matches conditional_match use this value for all other outputs directly."
    default: ""
  length:
    description: "If set, trim the string to this length"

outputs:
  original:
    description: "Original string"
    value: ${{ inputs.original }}  
  full_length:
    description: "Alphanumeric, lowercase, but full length version of the original string."
    value: ${{ steps.make_safe.outputs.full_length }}
  safe:
    description: "Alphanumeric, lowercase, trimmed to length version of the original string."
    value: ${{ steps.make_safe.outputs.safe }}

runs:
  using: "composite"
  steps:
   ##### REPEATING BLOCK >>>
    # Check running as a remote call
    - name: "Ensure running as remote"
      if: ${{ github.action_ref == '' }}
      shell: bash
      run: |
        err="ERROR: this composite action must be run via full path (eg ministryofjustice/opg-github-actions/.github/actions/terraform-version@v2.3.1)"
        echo -e "${err}"
        echo -e "${err}" >&2
        echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        exit 1
    # Use bash shell script to fetch and work out releases    
    - name: "Get release binary for this runner"
      shell: bash
      id: fetch
      env:
        GH_TOKEN: ${{ github.token }}
        GH_ACTION_REPOSITORY: "${{ github.action_repository }}"
        GH_ACTION_REF: "${{ github.action_ref }}"
        GH_WORKSPACE: "${{ github.workspace }}"
        actionsRootDir: "${{ github.action_path }}/../"
      run: |
        echo -e "Get release binary"
        cd ${actionsRootDir}
        ./release-download.sh 2> $GITHUB_STEP_SUMMARY
    ## LOCAL BUILD
    # setup and build locally if the release data is not setup
    - name: "Setup go"
      uses: actions/setup-go@v4
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      with:
        go-version-file: '${{ steps.fetch.outputs.SELF_BUILD }}/./go/go.mod'
        cache: false
    - name: Build directly from source
      id: buildFromSource
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      shell: bash
      env:
        buildSource: '${{ steps.fetch.outputs.SELF_BUILD }}'
        target: '${{ steps.fetch.outputs.TARGET_BUILD }}'
      run: |
        echo -e "Build from source"
        cd ${buildSource}
        echo -e "Building (with make) for ${target}"        
        make release
        release="${buildSource}/go/builds/${target}"
        echo -e "RELEASE=${release}"
        echo "RELEASE=${release}" >> $GITHUB_OUTPUT
    ## DETERMINE BINARY PATH
    - name: "Determine binary to use"
      id: binary
      shell: bash
      env:
        direct: ${{ steps.fetch.outputs.RELEASE }}
        built: ${{ steps.buildFromSource.outputs.RELEASE }}
      run: |
        echo -e "Determine binary to use..."
        binary=""
        if [ "${direct}" != "" ]; then
          binary="${direct}"
        elif [ "${built}" != "" ]; then
          binary="${built}"
        fi
        if [ "${binary}" == "" ]; then
          err="error: no binary found"
          echo -e "${err}"
          echo -e "${err}" >&2
          echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        fi
        echo -e "binary=${binary}"
        echo "binary=${binary}" >> $GITHUB_OUTPUT
    
    ##### <<< END REPEATING BLOCK 
    ##### COMMANDS
    - name: Create Safe strings
      id: make_safe
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        LOG_LEVEL: ${{ runner.debug == '1' && 'debug' || 'error' }}
        RUN_AS_TEST: ${{inputs.test}}
        APP_BIN: "${{ steps.binary.outputs.binary }}"
        original: ${{inputs.original}}
        suffix: ${{inputs.suffix}}
        length: ${{inputs.length}}
        conditinalMatch: ${{inputs.conditional_match}}
        conditionalValue: ${{inputs.conditional_value}}
      run: |
        echo -e "Running safe-string"
        ${APP_BIN} safe-string --string="${original}" --length="${length}" --suffix="${suffix}" --conditional-match="${conditinalMatch}" --conditional-value="${conditionalValue}"
    ######
    # clean up directories and other resources created
    - name: "Clean up"
      if: ${{ always() }}
      shell: bash
      env:
        app_binary: '${{ steps.binary.outputs.binary }}'
        DEBUG: ${{ runner.debug }}
      run: |
        echo -e "Clean up created resources"        
        rm -Rf "${{ env.app_binary }}"
        if [ "${{ env.DEBUG }}" == "1" ]; then
          git status
        fi       