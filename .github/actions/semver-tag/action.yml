name: "Create semver tag at current github sha using passed branch name as a suffix."
description: "Use the branch name passed (can be either refs/heads/name-of-thing or just name-of-thing)."
inputs:
  test:
    description: "If set, acts as a dry run without creating items"
    default: ""
  release_branch:
    description: "Release branch main - if branch name matches this the tag change to be a production style v1.1.0 without suffixes. (Default: main)"
    default: "main"
  prerelease:
    description: "If set, creates a pre-release (draft)."
    default: ""
  default_bump:
    description: "If no # triggers are found, bump the version by this. (Default: patch)"
    default: "patch"
  with_v:
    description: "New tag will start with a v prefix is this is any non-empty value."
    default: "true"
  github_token:
    description: "A token authorised with write permissions to create a release."
    default: ""
  releases_enabled:
    description: "If set, allows the creation of a release when on a release branch (and not testing)"
    default: "true"
  show_verbose_summary:
    description: "Set this to any value to show the more verbose summary output data"
    default: "true"
  

outputs:
  test:
    description: "Inputed test variable."
    value: ${{ inputs.test }}
  release_branch:
    description: "Inputed release_branch variable."
    value: ${{ inputs.release_branch }}
  

  branch_original:
    description: "Output from branch_name safety check - the branch_name return value"
    value: ${{ steps.branchname.outputs.branch_name }}
  branch_full_length:
    description: "Output from branch_name safety check - the full_length return value"
    value: ${{ steps.branchname.outputs.full_length }}
  branch_safe:
    description: "Output from branch_name safety check  - the safe return value"
    value: ${{ steps.branchname.outputs.safe }}

  prerelease:
    description: "Inputed prerelease variable."
    value: ${{ steps.latesttag.outputs.prerelease }}
  latest_tag_latest:
    description: "Output from latest_tag - the latest return value"
    value: ${{ steps.latesttag.outputs.latest_prerelease }}
  latest_tag_last_release:
    description: "Output from latest_tag - the last_release value"
    value: ${{ steps.latesttag.outputs.last_release }}

  next_tag:
    description: "Output from next_tag - the next_tag value"
    value: ${{ steps.nexttag.outputs.next_tag }}
  
  create_tag_created:
    description: "Output from create_tag - flag if it worked"
    value: ${{ steps.createtag.outputs.success }}
  
  release_id:
    description: "The id of the release if it was created"
    value: ${{steps.create_release.outputs.id}}
  release_url:
    description: "The html_url of the release if it was created"
    value: ${{steps.create_release.outputs.html_url}}

  created_tag:
    description: "Output from create_tag - the created value"
    value: ${{ steps.createtag.outputs.created_tag }}

runs:
  using: "composite"
  steps:
    #### SETUP ####
    # Determine if we are being called by self, or by external
    - name: Setup variables
      id: setup
      shell: bash
      env:
        ACTION_REPO: "${{ github.action_repository }}"
        ACTION:REF: "${{ github.action_ref }}"
        # JSON_DEBUG: ${{ toJSON(github) }}
      run: |
        echo -e "Setup variables."
        # self / repo info
        isSelf="${{ github.repository == 'ministryofjustice/opg-github-actions' }}"
        echo "isSelf=${isSelf}" >> $GITHUB_OUTPUT
        echo "actionRepo=${ACTION_REPO}" >> $GITHUB_OUTPUT
        echo "actionRef=${ACTION_REF}" >> $GITHUB_OUTPUT
        
        # build target info
        gha_os=$(uname | tr '[:upper:]' '[:lower:]')
        gha_arc=$(uname -m)
        make_target="${gha_os}_${gha_arc}"
        echo "target=${make_target}" >> $GITHUB_OUTPUT

        # where to put the target repo
        target="${{ github.workspace }}/_targetRepo"
        echo -e "targetDir=${target}"
        echo "targetDir=${target}" >> $GITHUB_OUTPUT

        if [ "${{ runner.debug }}" == "1" ]; then          
          echo "${JSON_DEBUG}"
        fi

        if [ "${isSelf}" == "true" ]; then
          echo -e "Warning: running against self."          
          path="${{ github.workspace }}"          
          echo "path=${path}" >> $GITHUB_OUTPUT
        elif [ -n "${ACTION_REF}" ]; then   
          echo -e "Info: running from remote"          
          path="${{ github.workspace }}/opggha"
          echo "path=${path}" >> $GITHUB_OUTPUT
        else
          echo -e "ERROR: failed to determine action code location"
          echo -e "ERROR: failed to determine action code location" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    #### REMOTE CALL ####
    # If called externally, then checkout self
    - name: "Checkout action [ ${{ steps.gha.outputs.isSelf }} ]"
      uses: actions/checkout@v4
      if: ${{ steps.setup.outputs.isSelf != 'true' }}
      with:
        repository: ${{ steps.setup.outputs.actionRepo }}
        ref: ${{ steps.setup.outputs.actionRef }}
        path: ${{ steps.setup.outputs.path }}
    # figure out how to get the artifacts (todo)

    #### SELF CALL ####
    - name: Setup go
      if: ${{ steps.setup.outputs.isSelf == 'true' }}
      uses: actions/setup-go@v4
      with:
        go-version-file: '${{ steps.setup.outputs.path }}/go/go.mod'
        cache-dependency-path: '${{ steps.setup.outputs.path }}/go/go.sum'
    # run the build 
    - name: "Build"
      id: build
      shell: bash
      if: ${{ steps.setup.outputs.isSelf == 'true' }}
      env:
        target: '${{ steps.setup.outputs.target }}'
        appPath: '${{ steps.setup.outputs.path }}'
      run: |
        echo -e "Building"
        cd ${appPath}
        echo "Building (via make) for ${target}"
        make ${target}
        cd ${{ github.workspace }}
    #### FETCH THE TARGET REPO INTO A SUB FOLDER
    - name: "Checkout target repo to set folder"
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}
        path: ${{ steps.setup.outputs.targetDir }}
        fetch-tags: true
        fetch-depth: 0
    
    #### COMMANDS ####
    # Get branch name info
    - name: "branch-name"
      id: branchname
      shell: bash
      env:        
        RUN_AS_TEST: ${{inputs.test}}
        appPath: '${{ steps.setup.outputs.path }}'
        binPath: '${{ steps.setup.outputs.path }}/go/builds/${{ steps.setup.outputs.target }}'
      run: |
        ${binPath} branch-name \
          --event-name="${GITHUB_EVENT_NAME}" \
          --event-data-file="${GITHUB_EVENT_PATH}"
    # latest tag
    - name: "latest-tag"
      id: latesttag
      shell: bash
      env:        
        RUN_AS_TEST: ${{ inputs.test }}
        appPath: '${{ steps.setup.outputs.path }}'
        binPath: '${{ steps.setup.outputs.path }}/go/builds/${{ steps.setup.outputs.target }}'
        repo: '${{ steps.setup.outputs.targetDir }}'
        branch: '${{ steps.branchname.outputs.branch_name }}'
        prerelease: '${{ inputs.prerelease }}'
        prereleaseSuffix: '${{ steps.branchname.outputs.safe }}'
        releaseBranch: '${{ inputs.release_branch }}'
      run: |        
        ${binPath} latest-tag \
          --repository="${repo}" \
          --branch="${branch}" \
          --prerelease="${prerelease}" \
          --prerelease-suffix="${prereleaseSuffix}" \
          --release-branches="${releaseBranch}"
    # next tag
    - name: "next-tag"
      id: nexttag
      shell: bash
      env:        
        RUN_AS_TEST: ${{ inputs.test }}
        appPath: '${{ steps.setup.outputs.path }}'
        binPath: '${{ steps.setup.outputs.path }}/go/builds/${{ steps.setup.outputs.target }}'
        repo: '${{ steps.setup.outputs.targetDir }}'
        branch: '${{ steps.branchname.outputs.branch_name }}'
        prerelease: '${{ steps.latesttag.outputs.prerelease }}'
        prereleaseSuffix: '${{ steps.latesttag.outputs.prerelease_suffix }}'        
        baseRef: '${{ steps.branchname.outputs.base_commitish }}'
        headRef: '${{ steps.branchname.outputs.head_commitish }}'
        lastRelease: '${{ steps.latesttag.outputs.last_release }}'
        lastPrerelease: '${{ steps.latesttag.outputs.last_prerelease }}'
        withV: '${{ inputs.with_v }}'
        defaultBump: '${{ inputs.default_bump }}'
      run: |        
        ${binPath} next-tag \
          --repository="${repo}" \
          --base="${baseRef}" \
          --head="${headRef}" \
          --prerelease="${prerelease}" \
          --prerelease-suffix="${prereleaseSuffix}" \
          --last-release="${lastRelease}" \
          --last-prerelease="${lastPrerelease}" \
          --with-v="${withV}" \
          --default-bump="${defaultBump}"
    # create tag
    - name: "create-tag"
      id: createtag
      shell: bash
      env:        
        GITHUB_TOKEN: ${{ inputs.github_token }}
        RUN_AS_TEST: ${{ inputs.test }}
        appPath: '${{ steps.setup.outputs.path }}'
        binPath: '${{ steps.setup.outputs.path }}/go/builds/${{ steps.setup.outputs.target }}'
        repo: '${{ steps.setup.outputs.targetDir }}'
        commitish: '${{ steps.branchname.outputs.branch_name }}'
        tagName: '${{ steps.nexttag.outputs.next_tag }}'
        prereleaseSuffix: '${{ steps.latesttag.outputs.prerelease_suffix }}'                
      run: |
        ${binPath} create-tag \
          --repository="${repo}" \
          --commitish="${commitish}" \
          --tag-name="${tagName}" \
          --regen="true" \
          --push="true" 
    # Create a release object
    - name: "Create a release"
      id: create_release      
      if: ${{ inputs.releases_enabled == 'true' }}
      uses: ncipollo/release-action@v1.13.0
      with:
        tag: ${{ steps.createtag.outputs.created_tag }}
        name: ${{ steps.createtag.outputs.created_tag }}
        draft: ${{ steps.latesttag.outputs.prerelease == 'true' }}
        prerelease: ${{ steps.latesttag.outputs.prerelease == 'true' }}
        generateReleaseNotes: true
    - name: "summary"
      if: ${{ (always()) && (inputs.show_verbose_summary != '') }}
      shell: bash
      run: |
        echo "### Semver tag summary" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Variable | Value |" >> $GITHUB_STEP_SUMMARY
        echo "| --- | --- | --- |"  >> $GITHUB_STEP_SUMMARY
        echo "| Branch | branch_name | ${{ steps.branchname.outputs.branch_name }} |"  >> $GITHUB_STEP_SUMMARY
        echo "| Branch | safe | ${{ steps.branchname.outputs.safe }} |"  >> $GITHUB_STEP_SUMMARY
        echo "| Branch | full_length | ${{ steps.branchname.outputs.full_length }} |"  >> $GITHUB_STEP_SUMMARY
        echo "| Latest Tag | last_prerelease | ${{ steps.latesttag.outputs.last_prerelease }} |"  >> $GITHUB_STEP_SUMMARY
        echo "| Latest Tag | last_release | ${{ steps.latesttag.outputs.last_release }} |"  >> $GITHUB_STEP_SUMMARY
        echo "| Next Tag | next_tag | ${{ steps.nexttag.outputs.next_tag }} |"  >> $GITHUB_STEP_SUMMARY
        echo "| Create Tag | test | ${{ steps.createtag.outputs.test }} |"  >> $GITHUB_STEP_SUMMARY
        echo "| Create Tag | requested_tag | ${{ steps.createtag.outputs.requested_tag }} |"  >> $GITHUB_STEP_SUMMARY
        echo "| **Create Tag** | **created** | **${{ steps.createtag.outputs.created_tag }}** |"  >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ steps.create_release.outputs.id }}" ]; then
          echo "| **Release** | **URL** | **[${{ steps.create_release.outputs.id }}](${{ steps.create_release.outputs.html_url }})** |"  >> $GITHUB_STEP_SUMMARY
        fi        
