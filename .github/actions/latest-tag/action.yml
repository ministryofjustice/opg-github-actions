name: "Get the latest semver compatible tag on this repo"
description: "Use the branch name passed (can be either refs/heads/name-of-thing or just name-of-thing)."
inputs:
  prerelease:
    description: "If set, looks for pre-release tag patterns (v1.1.1-${suffix}.${count})"
    default: ""
  prerelease_suffix:
    description: "If prerelease is set, this string is used as the ${suffix} in the tag pattern. (Default: beta)"
    default: "beta"
  branch_name:
    description: "Current branch name"
    default: "beta"
  release_branch:
    description: "Branch that would trigger this as a release."
    default: "main"

outputs:
  prerelease:
    description: "Inputed prerelease variable."
    value: ${{ steps.latest.outputs.prerelease }}
  prerelease_suffix:
    description: "Inputed prerelease_suffix variable."
    value: ${{ steps.latest.outputs.prerelease_suffix }}
  last_prerelease:
    description: "Latest tag found"
    value: ${{steps.latest.outputs.last_prerelease}}
  last_release:
    description: "Last release tag found"
    value: ${{steps.latest.outputs.last_release}}


runs:
  using: "composite"
  steps:
    ##### REPEATING BLOCK >>>
    # Check running as a remote call
    - name: "Ensure running as remote"
      if: ${{ github.action_ref == '' }}
      shell: bash
      run: |
        err="ERROR: this composite action must be run via full path (eg ministryofjustice/opg-github-actions/.github/actions/terraform-version@v2.3.1)"
        echo -e "${err}"
        echo -e "${err}" >&2
        echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        exit 1
    # Use bash shell script to fetch and work out releases    
    - name: "Get release binary for this runner"
      shell: bash
      id: fetch
      env:
        GH_TOKEN: ${{ github.token }}
        GH_ACTION_REPOSITORY: "${{ github.action_repository }}"
        GH_ACTION_REF: "${{ github.action_ref }}"
        GH_WORKSPACE: "${{ github.workspace }}"
        actionsRootDir: "${{ github.action_path }}/../"
      run: |
        echo -e "Get release binary"
        cd ${actionsRootDir}
        ./release-download.sh 2> $GITHUB_STEP_SUMMARY
    ## LOCAL BUILD
    # setup and build locally if the release data is not setup
    - name: "Setup go"
      uses: actions/setup-go@v4
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      with:
        go-version-file: '${{ steps.fetch.outputs.SELF_BUILD }}/./go/go.mod'
        cache: false
    - name: Build directly from source
      id: buildFromSource
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      shell: bash
      env:
        buildSource: '${{ steps.fetch.outputs.SELF_BUILD }}'
        target: '${{ steps.fetch.outputs.TARGET_BUILD }}'
      run: |
        echo -e "Build from source"
        cd ${buildSource}
        echo -e "Building (with make) for ${target}"        
        make release
        release="${buildSource}/go/builds/${target}"
        echo -e "RELEASE=${release}"
        echo "RELEASE=${release}" >> $GITHUB_OUTPUT
    ## DETERMINE BINARY PATH
    - name: "Determine binary to use"
      id: binary
      shell: bash
      env:
        direct: ${{ steps.fetch.outputs.RELEASE }}
        built: ${{ steps.buildFromSource.outputs.RELEASE }}
      run: |
        echo -e "Determine binary to use..."
        binary=""
        if [ "${direct}" != "" ]; then
          binary="${direct}"
        elif [ "${built}" != "" ]; then
          binary="${built}"
        fi
        if [ "${binary}" == "" ]; then
          err="error: no binary found"
          echo -e "${err}"
          echo -e "${err}" >&2
          echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        fi
        echo -e "binary=${binary}"
        echo "binary=${binary}" >> $GITHUB_OUTPUT
    ### CHECKOUT
    # get our the calling repo as we need to access files form there
    - name: "Checkout calling repository"
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}
        path: '${{ github.workspace}}/_target'
        fetch-depth: 0
        fetch-tags: true
    ##### <<< END REPEATING BLOCK 
    #### COMMANDS
    - name: "latest-tag" 
      id: "latest"
      shell: bash
      env:
        LOG_LEVEL: ${{ runner.debug == '1' && 'debug' || 'error' }}
        APP_BIN: "${{ steps.binary.outputs.binary }}"
        repository: '${{ github.workspace}}/_target'
        branch: '${{ inputs.branch_name }}'
        prerelease: '${{ inputs.prerelease }}'
        prereleaseSuffix: '${{ inputs.prerelease_suffix }}'
        releaseBranches: '${{ inputs.release_branch }}'
      run:
        echo -e "Running latest-tag"

        ${APP_BIN} latest-tag --repository="${repository}" --branch="${branch}" --prerelease="${prerelease}" --prerelease-suffix="${prereleaseSuffix}" --release-branches="${releaseBranches}"
    
