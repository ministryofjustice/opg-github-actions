name: "Create a new git tag at the commitish passed"
description: "Create a new git tag at the commitish passed"
inputs:
  commitish:
    description: "The github commit reference to checkout to and create the tag at"
    required: true
  tag_name:
    description: "Name of the tag to create"
    required: true
  test:
    description: "If set, tag is not pushed to the remote."
    default: ""


outputs:  
  requested:
    description: "The tag name that was requested to be created. May differ from the created tag if there is a name clash."
    value: ${{steps.create_tag.outputs.requested_tag}}
  created:
    description: "The tag name that is created. It may differ from inputs.tag_name if this tag already exists. Compare to requested variable to see if these match"
    value: ${{steps.create_tag.outputs.created_tag}}
  success:
    description: "Boolean to say if the tag was created successfully"
    value: ${{steps.create_tag.outputs.success}}
  regenerated:
    description: "Boolean to say if the tag clashed and had to be recreated"
    value: ${{steps.create_tag.outputs.regenerated}}    

runs:
  using: "composite"
  steps:
    ##### REPEATING BLOCK >>>
    # Check running as a remote call
    - name: "Ensure running as remote"
      if: ${{ github.action_ref == '' }}
      shell: bash
      run: |
        err="ERROR: this composite action must be run via full path (eg ministryofjustice/opg-github-actions/.github/actions/terraform-version@v2.3.1)"
        echo -e "${err}"
        echo -e "${err}" >&2
        echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        exit 1
    # Use bash shell script to fetch and work out releases    
    - name: "Get release binary for this runner"
      shell: bash
      id: fetch
      env:
        GH_TOKEN: ${{ github.token }}
        GH_ACTION_REPOSITORY: "${{ github.action_repository }}"
        GH_ACTION_REF: "${{ github.action_ref }}"
        GH_WORKSPACE: "${{ github.workspace }}"
        actionsRootDir: "${{ github.action_path }}/../"
      run: |
        echo -e "Get release binary"
        cd ${actionsRootDir}
        ./release-download.sh 2> $GITHUB_STEP_SUMMARY
    ## LOCAL BUILD
    # setup and build locally if the release data is not setup
    - name: "Setup go"
      uses: actions/setup-go@v4
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      with:
        go-version-file: '${{ steps.fetch.outputs.SELF_BUILD }}/./go/go.mod'
        cache: false
    - name: Build directly from source
      id: buildFromSource
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      shell: bash
      env:
        buildSource: '${{ steps.fetch.outputs.SELF_BUILD }}'
        target: '${{ steps.fetch.outputs.TARGET_BUILD }}'
      run: |
        echo -e "Build from source"
        cd ${buildSource}
        echo -e "Building (with make) for ${target}"        
        make release
        release="${buildSource}/go/builds/${target}"
        echo -e "RELEASE=${release}"
        echo "RELEASE=${release}" >> $GITHUB_OUTPUT
    ## DETERMINE BINARY PATH
    - name: "Determine binary to use"
      id: binary
      shell: bash
      env:
        direct: ${{ steps.fetch.outputs.RELEASE }}
        built: ${{ steps.buildFromSource.outputs.RELEASE }}
      run: |
        echo -e "Determine binary to use..."
        binary=""
        if [ "${direct}" != "" ]; then
          binary="${direct}"
        elif [ "${built}" != "" ]; then
          binary="${built}"
        fi
        if [ "${binary}" == "" ]; then
          err="error: no binary found"
          echo -e "${err}"
          echo -e "${err}" >&2
          echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        fi
        echo -e "binary=${binary}"
        echo "binary=${binary}" >> $GITHUB_OUTPUT
    ### CHECKOUT
    # get our the calling repo as we need to access files form there
    - name: "Checkout calling repository"
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}
        path: '${{ github.workspace}}/_target'
        fetch-depth: 0
        fetch-tags: true
    ##### <<< END REPEATING BLOCK 
    #### COMMANDS
    - name: Create tag
      id: create_tag
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        LOG_LEVEL: ${{ runner.debug == '1' && 'debug' || 'error' }}
        APP_BIN: "${{ steps.binary.outputs.binary }}"
        RUN_AS_TEST: ${{ inputs.test }}
        repository: '${{ github.workspace}}/_target'
        tagName: '${{ inputs.tag_name }}'
        commitish: '${{ inputs.commitish }}'
        regen: 'true'
        push: ${{ inputs.test != 'true' }}
      run: |
        echo -e "Running create-tag"
        ${APP_BIN} create-tag --repository="${repository}" --tag-name="${tagName}" --commitish="${commitish}" --regen="${regen}" --push="${push}"