name: "Branch Name"
description: "Get branch data. Example: ref/heads/main-123-456-789 => main-123-456-789. Also return safe-strings versions."

outputs:
  branch_name:
    description: "Branch name"
    value: ${{ steps.safe.outputs.branch_name }}
  full_length:
    description: 'Alphanumeric, lowercase, but full length version of the branch.'
    value: ${{ steps.safe.outputs.full_length }}
  safe:
    description: 'Alphanumeric and lowercase version of the branch, trimmed to 12 characters.'
    value: ${{ steps.safe.outputs.safe }}
  source_commitish:
    description: "Commit hashes / branches can be used for comparisions later"
    value: ${{ steps.safe.outputs.base_commitish }}
  destination_commitish:
    description: "Commit hashes / branches can be used for comparisions later"
    value: ${{ steps.safe.outputs.head_commitish }}

runs:
  using: "composite"
  steps:
    ##### REPEATING BLOCK >>>
    # Check running as a remote call
    - name: "Ensure running as remote"
      if: ${{ github.action_ref == '' }}
      shell: bash
      run: |
        err="ERROR: this composite action must be run via full path (eg ministryofjustice/opg-github-actions/.github/actions/branch-name@v2.3.1)"
        echo -e "${err}"
        echo -e "${err}" >&2
        echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        exit 1
    # Use bash shell script to fetch and work out releases    
    - name: "Get release binary for this runner"
      shell: bash
      id: fetch
      env:
        GH_TOKEN: ${{ github.token }}
        GH_ACTION_REPOSITORY: "${{ github.action_repository }}"
        GH_ACTION_REF: "${{ github.action_ref }}"
        GH_WORKSPACE: "${{ github.workspace }}"
        actionsRootDir: "${{ github.action_path }}/../"
      run: |
        echo -e "Get release binary"
        cd ${actionsRootDir}
        ./release-download.sh 2> $GITHUB_STEP_SUMMARY
    ## LOCAL BUILD
    # setup and build locally if the release data is not setup
    - name: "Setup go"
      uses: actions/setup-go@v4
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      with:
        go-version-file: '${{ steps.fetch.outputs.SELF_BUILD }}/./go/go.mod'
        cache: false
    - name: Build directly from source
      id: buildFromSource
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      shell: bash
      env:
        buildSource: '${{ steps.fetch.outputs.SELF_BUILD }}'
        target: '${{ steps.fetch.outputs.TARGET_BUILD }}'
      run: |
        echo -e "Build from source"
        cd ${buildSource}
        echo -e "Building (with make) for ${target}"        
        make release
        release="${buildSource}/go/builds/${target}"
        echo -e "RELEASE=${release}"
        echo "RELEASE=${release}" >> $GITHUB_OUTPUT
    ## DETERMINE BINARY PATH
    - name: "Determine binary to use"
      id: binary
      shell: bash
      env:
        direct: ${{ steps.fetch.outputs.RELEASE }}
        built: ${{ steps.buildFromSource.outputs.RELEASE }}
      run: |
        binary=""
        if [ "${direct}" != "" ]; then
          binary="${direct}"
        elif [ "${built}" != "" ]; then
          binary="${built}"
        fi
        if [ "${binary}" == "" ]; then
          err="error: no binary found"
          echo -e "${err}"
          echo -e "${err}" >&2
          echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        fi
        echo -e "binary=${binary}"
        echo "binary=${binary}" >> $GITHUB_OUTPUT
    ##### <<< END REPEATING BLOCK  
    #### COMMANDS
    # RUN THE COMMAND
    - name: Generate branch info
      id: safe
      shell: bash
      env:        
        LOG_LEVEL: ${{ runner.debug == '1' && 'debug' || 'error' }}
        APP_BIN: "${{ steps.binary.outputs.binary }}"
      run: |
        echo -e "Run branch-name"        
        ${APP_BIN} branch-name --event-name="${GITHUB_EVENT_NAME}" --event-data-file="${GITHUB_EVENT_PATH}"
