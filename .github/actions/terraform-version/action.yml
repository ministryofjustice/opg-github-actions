# Find Terraform Version from the versions.tf file
name: "Parse Terraform Version From File"
description: "Determine terraform version to use from version file"
inputs:
  terraform_directory:
    description: "Directory where terraform will be run from. Looks for versions.tf file in this path."
    required: true
  terraform_versions_file:
    description: "Name of file that contains the required_version config is stored. (Default `./versions.tf`)"
    default: "./versions.tf"
  simple_file:
    description: "If 'true', change the parsing to presume terraform_versions_file is a plain text file that contains only a semver string."
    default: "false"

outputs:
  version:
    description: 'Discovered terraform version range. This may be an exact number (like 1.5.5) or a semver range (like >= 1.0).'
    value: ${{ steps.version.outputs.version }}

runs:
  using: "composite"
  steps:
    ##### REPEATING BLOCK >>>
    # Check running as a remote call
    - name: "Ensure running as remote"
      if: ${{ github.action_ref == '' }}
      shell: bash
      run: |
        err="ERROR: this composite action must be run via full path (eg ministryofjustice/opg-github-actions/.github/actions/terraform-version@v2.3.1)"
        echo -e "${err}"
        echo -e "${err}" >&2
        echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        exit 1
    # Use bash shell script to fetch and work out releases    
    - name: "Get release binary for this runner"
      shell: bash
      id: fetch
      env:
        GH_TOKEN: ${{ github.token }}
        GH_ACTION_REPOSITORY: "${{ github.action_repository }}"
        GH_ACTION_REF: "${{ github.action_ref }}"
        GH_WORKSPACE: "${{ github.workspace }}"
        actionsRootDir: "${{ github.action_path }}/../"
      run: |
        echo -e "Get release binary"
        cd ${actionsRootDir}
        ./release-download.sh 2> $GITHUB_STEP_SUMMARY
    ## LOCAL BUILD
    # setup and build locally if the release data is not setup
    - name: "Setup go"
      uses: actions/setup-go@v4
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      with:
        go-version-file: '${{ steps.fetch.outputs.SELF_BUILD }}/./go/go.mod'
        cache: false
    - name: Build directly from source
      id: buildFromSource
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      shell: bash
      env:
        buildSource: '${{ steps.fetch.outputs.SELF_BUILD }}'
        target: '${{ steps.fetch.outputs.TARGET_BUILD }}'
      run: |
        echo -e "Build from source"
        cd ${buildSource}
        echo -e "Building (with make) for ${target}"        
        make release
        release="${buildSource}/go/builds/${target}"
        echo -e "RELEASE=${release}"
        echo "RELEASE=${release}" >> $GITHUB_OUTPUT
    ## DETERMINE BINARY PATH
    - name: "Determine binary to use"
      id: binary
      shell: bash
      env:
        direct: ${{ steps.fetch.outputs.RELEASE }}
        built: ${{ steps.buildFromSource.outputs.RELEASE }}
      run: |
        echo -e "Determine binary to use..."
        binary=""
        if [ "${direct}" != "" ]; then
          binary="${direct}"
        elif [ "${built}" != "" ]; then
          binary="${built}"
        fi
        if [ "${binary}" == "" ]; then
          err="error: no binary found"
          echo -e "${err}"
          echo -e "${err}" >&2
          echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        fi
        echo -e "binary=${binary}"
        echo "binary=${binary}" >> $GITHUB_OUTPUT
    ### CHECKOUT
    # get our the calling repo as we need to access files form there
    - name: "Checkout calling repository"
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}
        path: '${{ github.workspace}}/_target'
        fetch-depth: 0
        fetch-tags: true
    ##### <<< END REPEATING BLOCK 

    #### COMMANDS
    - name: "terraform-version" 
      id: "version"
      shell: bash
      env:
        LOG_LEVEL: ${{ runner.debug == '1' && 'debug' || 'error' }}
        APP_BIN: "${{ steps.binary.outputs.binary }}"
        Directory: "${{ github.workspace}}/_target/${{ inputs.terraform_directory }}"
        VersionsFile: ${{ inputs.terraform_versions_file }}
        SimpleFile: ${{ inputs.simple_file }}
      run:
        echo -e "Running terraform-version"

        ${APP_BIN} terraform-version --directory="${Directory}" --versions-file="${VersionsFile}" --simple="${SimpleFile}"
          
