# Find Terraform Version from the versions.tf file
name: "Parse Terraform Version From File"
description: "Determine terraform version to use from version file"
inputs:
  terraform_directory:
    description: "Directory where terraform will be run from. Looks for versions.tf file in this path."
    required: true
  terraform_versions_file:
    description: "Name of file that contains the required_version config is stored. (Default `./versions.tf`)"
    default: "./versions.tf"
  simple_file:
    description: "If set, change the parsing to presume terraform_versions_file is a plain text file that contains only a semver string."
    default: ""

outputs:
  terraform_directory:
    description: "Input value of terraform_directory"
    value: ${{ inputs.terraform_directory }}
  terraform_versions_file:
    description: "Input value of terraform_versions_file"
    value: ${{ inputs.terraform_versions_file }}
  simple_file:
    description: "Input value of simple_file"
    value: ${{ inputs.simple_file }}
  version:
    description: 'Discovered terraform version range. This may be an exact number (like 1.5.5) or a semver range (like >= 1.0).'
    value: ${{ steps.version.outputs.version }}

runs:
  using: "composite"
  steps:
    # Check running as a remote call
    - name: "Ensure running as remote"
      if: ${{ github.action_ref == '' }}
      shell: bash
      run: |
        err="ERROR: this composite action must be run via full path (eg ministryofjustice/opg-github-actions/.github/actions/terraform-version@v2.3.1)"
        echo -e "${err}"
        echo -e "${err}" >&2
        echo -e "${err}" >> $GITHUB_STEP_SUMMARY
        exit 1
    # Use bash shell script to fetch and work out releases    
    - name: "Get release binary for this runner"
      shell: bash
      id: fetch
      env:
        GH_TOKEN: ${{ github.token }}
        GH_ACTION_REPOSITORY: "${{ github.action_repository }}"
        GH_ACTION_REF: "${{ github.action_ref }}"
        GH_WORKSPACE: "${{ github.workspace }}"
        actionsRootDir: "${{ github.action_path }}/../"
      run: |
        cd ${actionsRootDir}
        # ./release-download.sh 2> $GITHUB_STEP_SUMMARY
        ./release-download.sh
    # setup and build locally if the release data is not setup
    - name: Setup go
      uses: actions/setup-go@v4
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      with:
        go-version-file: '${{ steps.fetch.outputs.SELF_BUILD }}/./go/go.mod'
        cache: false
    - name: Build directly from source
      if: ${{ steps.fetch.outputs.RELEASE == '' }}
      shell: bash
      env:
        buildSource: '${{ steps.fetch.outputs.SELF_BUILD }}'
        target: '${{ steps.fetch.outputs.TARGET_BUILD }}'
      run: |
        cd ${buildSource}
        echo -e "Building (with make) for ${target}"
        ls -la
        make release
        ls -la ./builds/

      

