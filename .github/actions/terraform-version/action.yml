# Find Terraform Version from the versions.tf file
name: "Parse Terraform Version From File"
description: "Determine terraform version to use from version file"
inputs:
  terraform_directory:
    description: "Directory where terraform will be run from. Looks for versions.tf file in this path."
    required: true
  terraform_versions_file:
    description: "Name of file that contains the required_version config is stored. (Default `./versions.tf`)"
    default: "./versions.tf"
  simple_file:
    description: "If set, change the parsing to presume terraform_versions_file is a plain text file that contains only a semver string."
    default: ""
outputs:
  terraform_directory:
    description: "Input value of terraform_directory"
    value: ${{ inputs.terraform_directory }}
  terraform_versions_file:
    description: "Input value of terraform_versions_file"
    value: ${{ inputs.terraform_versions_file }}
  simple_file:
    description: "Input value of simple_file"
    value: ${{ inputs.simple_file }}
  version:
    description: 'Discovered terraform version range. This may be an exact number (like 1.5.5) or a semver range (like >= 1.0).'
    value: ${{ steps.version.outputs.version }}

runs:
  using: "composite"
  
  steps:
    # REPO: "ministryofjustice/opg-github-actions" 
    # GH_TOKEN: ${{ github.token }}
    # checkout the opg-github-actions repo if it doesnt exist
    - name: "Look for opg-github-actions repo at known path"
      id: action_setup
      shell: bash
      run: |
        if [ ! -d "${REPO}" ]; then
          echo "opgaction_exists=false" >> $GITHUB_OUTPUT
        else
          echo "opgaction_exists=true" >> $GITHUB_OUTPUT
        fi
        echo "opgaction_repo=${{ github.action_repository }}" >> $GITHUB_OUTPUT
        echo "opgaction_ref=${{ github.action_ref }}" >> $GITHUB_OUTPUT
    - name: "Checkout the actions repo to a known path"
      uses: actions/checkout@v4
      if: ${{ steps.action_setup.opgaction_exists == 'false' }}
      with:
        repository: ${{ steps.action_setup.opgaction_repo }}
        ref: ${{ steps.action_setup.opgaction_ref }}
        path: "${{ github.workspace}}/opg-gha"
    - name: "Debug checkout"
      shell: bash
      run: |
        ls -la ${{ github.workspace}}/opg-gha

    # # get our the calling repo as we need to access files form there
    # - uses: actions/checkout@v4
    #   with:
    #     repository: ${{ github.repository }}
    #     ref: ${{ github.ref }}
    # # fail if directory or version file does not exist
    # - id: version
    #   name: Parse terraform version data from [${{ inputs.terraform_directory }}][${{ inputs.terraform_versions_file }}]
    #   shell: bash
    #   env:
    #     TERRAFORM_DIR: ${{ inputs.terraform_directory }}
    #     TERRAFORM_VERSIONS_FILE: ${{ inputs.terraform_versions_file }}
    #     SIMPLE_FILE: ${{ inputs.simple_file }}
    #   run: |
    #     echo -e "# terraform-version setup:"
    #     echo -e "TERRAFORM_DIR: ${TERRAFORM_DIR}"
    #     echo -e "TERRAFORM_VERSIONS_FILE: ${TERRAFORM_VERSIONS_FILE}"
    #     echo -e "SIMPLE_FILE: ${SIMPLE_FILE}"

    #     echo "version=" >> $GITHUB_OUTPUT
    #     if [ ! -d ${TERRAFORM_DIR} ]; then
    #       echo "Directory not found"
    #       exit 1
    #     fi
    #     cd ${TERRAFORM_DIR}
    #     if [ ! -f ${TERRAFORM_VERSIONS_FILE} ]; then
    #       echo "File not found"
    #       exit 1
    #     fi

    #     if [ ! -z "${SIMPLE_FILE}" ]; then
    #       echo "Presuming plain text file"
    #       terraform_version=$(cat ${TERRAFORM_VERSIONS_FILE} )
    #     else
    #       echo "Presuming terraform file"
    #       terraform_version=$(cat ${TERRAFORM_VERSIONS_FILE} | sed -r -n 's/.*required_version.*"(.*)"$/\1/p' )
    #     fi
    #     echo "version=${terraform_version}" >> $GITHUB_OUTPUT
