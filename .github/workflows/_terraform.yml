name: "[Terraform] Plan & Apply "

on:
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
  push:
    branches: [main]
    paths:
      - 'terraform/**'      

permissions:
  contents: read
  security-events: write
  pull-requests: read
  actions: none
  checks: none
  deployments: none
  issues: none
  packages: none
  repository-projects: none
  statuses: none


jobs:

  terraform:
    name: "Plan and Apply"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash        
    env:
      tf_dir: "./terraform/account"
      apply: ${{ github.ref == 'refs/heads/main' }}
      TF_VAR_github_token: ${{ secrets.GIT_API_TOKEN }}
      TF_VAR_pagerduty_token: ${{ secrets.PAGERDUTY_TOKEN }}
    outputs:
      terraform_version: ${{steps.tf_version.outputs.version}}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Parse terraform version [directory: ${{ env.tf_dir }}]"
        id: tf_version
        uses: ministryofjustice/opg-github-actions/.github/actions/terraform-version@v1.1.0
        with:
          terraform_directory: ${{ env.tf_dir }}
      - name: "Setup terraform [version: ${{ steps.tf_version.outputs.version }}]"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.tf_version.outputs.version }}
      - name: Configure AWS Credentials For Terraform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-session-name: GitHubActionsOrgInfra
      - name: "Lint Terraform"
        id: tf_lint
        working-directory: ${{ env.tf_dir }}
        run: terraform fmt -check -recursive
      - name: "Terraform Plan"
        working-directory: ${{ env.tf_dir }}
        run: |
          terraform init -input=false -lock-timeout=300s
          terraform plan -lock-timeout=300s -input=false -parallelism=30
      - name: "Terraform Apply [apply: ${{env.apply}}]"
        if: env.apply
        working-directory: ${{ env.tf_dir }}
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30
