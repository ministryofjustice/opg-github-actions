name: "Create a release"
description: >
  Generate a release

inputs:
  tag:
    description: "Git tag to use for the release"
    required: true
  # optional github token
  github_token:
    description: "GitHub token for authentication to allow tag to be pushed to the remote"
    default: ""
  # is this a prerelease?
  prerelease:
    description: "If set, flags this as being a pre-release."
    required: true
    default: "true"

  latest:
    description: "If set, flags this as being latest release. When empty, will work this out from prerelease"
    default: ""
  # attach artifact matching this pattern
  release_artifact:
    description: "Pattern to attach any artifacts. Should be based from the `github.workspace` path."
    default: ""
  # the gh tool has two methods for generating notes, this lets you swap between them
  release_notes_flag:
    description: "Flag to use for note generation - can be `--notes-from-tag` or `--generate-notes`"
    default: "--notes-from-tag"


runs:
  using: composite

  steps:
    ####### RUN COMMAND
    - name: "Looking for existing release for tag [tag: ${{ inputs.tag }} pre: ${{ inputs.prerelease }} ]"
      id: find_release
      shell: bash
      env:
        # token auth
        GH_TOKEN: ${{ inputs.github_token != '' && inputs.github_token || github.token }}
        # setup
        tag: ${{ inputs.tag }}
        prerelease_select: ${{ inputs.prerelease == 'true' && '| select(.isPrerelease==true)' || '' }}
      run: |
        echo "Looking for release with tag name: ${{ env.tag }}"
        list=$(gh release list --json=""name,tagName,isDraft,isPrerelease" --jq='.[] | select(.tagName=="${{ env.tag }}") ${{ env.prerelease_select }} | .tagName')
        if [[ "$list" == "${{ env.tag }}" ]];
          echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
        fi

    - name: "Release already exists, skipping [tag: ${{ inputs.tag }} pre: ${{ inputs.prerelease }}]"
      shell: bash
      if: steps.find_release.outputs.RELEASE_EXISTS != 'true'
      run: |
        echo "release already exists for this tag "

    - name: "Create a release for [tag: ${{ inputs.tag }} pre: ${{ inputs.prerelease }}]"
      id: create_release
      shell: bash
      if: steps.find_release.outputs.RELEASE_EXISTS == 'true'
      env:
        # token auth
        GH_TOKEN: ${{ inputs.github_token != '' && inputs.github_token || github.token }}
        # release exists
        exists: ${{ steps.find_release.outputs.RELEASE_EXISTS }}
        # prerelease for the release aligns with the prelreease flag for the tag generation
        prerelease: ${{ inputs.prerelease == 'true' && '--prerelease' || '' }}
        # latest is only true when this is not a prerelease; input can overwrite this
        latest: ${{ inputs.latest !='' && '--latest=true' || inputs.prerelease == 'true' && '--latest=false' || '--latest=true' }}
        # how to generate notes
        notes: ${{ inputs.release_notes_flag != '' && inputs.release_notes_flag || '--notes-from-tag' }}
        # the tag value to use
        tag: ${{ inputs.tag }}
        # artifact pattern
        artifacts: ${{ inputs.release_artifact }}
      run: |
        echo "Creating release ... ${{ env.tag }}"
        gh release create ${{ env.tag }} ${{ env.artifacts }} \
          ${{ env.prerelease }} ${{ env.latest }} ${{ env.notes }} --verify-tag \
          -t ${{ env.tag }}
