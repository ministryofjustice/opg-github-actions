name: "Semver"
description: >
  Generate (or return) a semantic version tag to use for images / releases and so on.

inputs:
  test:
    description: "When true, the tag will not be created"
    default: "true"

  prerelease:
    description: "If set, flags this as being a pre-release."
    default: "true"

  prelease_suffix_length:
    description: "Max length of prerelease suffix string to use."
    default: "12"

  branch_name:
    description: "Overwrite the branch name with this value"
    default: ""

  default_bump:
    description: "Value to increment semver by"
    default: "patch"



# outputs:


runs:
  using: composite
  steps:
    ####### BUILD THE BINARY
    # Setup go version to use from the mod file it the base
    - name: "Setup go version"
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        # relative path to where the go.mod file sites from inside the ./action/$name path
        go-version-file: '${{ github.action_path }}/../../go.mod'
        cache: false
    # Build the binary
    - name: "Build binary"
      id: builder
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        source: "${{ github.action_path }}/../../action/cmd/semver"
        build_directory: "${{ github.action_path }}/builds"
        binary: "${{ github.action_path }}/builds/semver"
        # we dont use CGO for this command
        CGO_ENABLED: 0
      run: |
        echo "Build binary from source ... "
        mkdir -p ${{ env.build_directory }}
        go build -ldflags="-w -s" -o ${{ env.binary }} ${{ env.source }}/
    ####### END BUILD
    ####### RUN COMMAND
    # run the command
    - name: "Create semver tag"
      id: cmd
      shell: bash
      env:
        binary: "${{ github.action_path }}/builds/semver"
        # location of github repo
        directory: ${{ github.workspace }}
        # branch name to use - order here matters ... user input takes precendence, the pr, then push
        branch: ${{ inputs.branch_name != '' && inputs.branch_name || github.head_ref != '' && github.head_ref || github.ref_name }}
        # the default branch for this repo
        default_branch: ${{ github.event.repository.default_branch }}
        # is this a prerelease or not - appened the flag
        prerelease: ${{ inputs.prerelease == 'true' && '--prerelease' || '' }}
        # max length to use for a prerelease suffix
        prerelease_suffix_length: ${{ inputs.prelease_suffix_length }}
        # bump by
        default_bump: ${{ inputs.default_bump }}
        # prefix
        with_prefix: ${{ inputs.with_prefix == 'true' && '--with-prefix' || '' }}
        # test mode
        test_mode: ${{ inputs.test == 'true' && '--test' || '' }}
      run: |
        echo "Running semver command ... "

        echo "## Env " >> $GITHUB_STEP_SUMMARY
        echo "| Variable | Value |" >> $GITHUB_STEP_SUMMARY
        echo "| --- | --- |"  >> $GITHUB_STEP_SUMMARY
        echo "| binary | ${{ env.binary }} |" >> $GITHUB_STEP_SUMMARY
        echo "| directory | ${{ env.directory }} |" >> $GITHUB_STEP_SUMMARY
        echo "| branch | ${{ env.branch }} |" >> $GITHUB_STEP_SUMMARY
        echo "| default_branch | ${{ env.default_branch }} |" >> $GITHUB_STEP_SUMMARY
        echo "| prerelease | ${{ env.prerelease }} |" >> $GITHUB_STEP_SUMMARY
        echo "| prerelease_suffix_length | ${{ env.prerelease_suffix_length }} |" >> $GITHUB_STEP_SUMMARY
        echo "| default_bump | ${{ env.default_bump }} |" >> $GITHUB_STEP_SUMMARY
        echo "| with_prefix | ${{ env.with_prefix }} |" >> $GITHUB_STEP_SUMMARY
        echo "| test_mode | ${{ env.test_mode }} |" >> $GITHUB_STEP_SUMMARY

        ${{ env.binary }} \
          --directory=${{ env.directory }} \
          --branch=${{ env.branch}} \
          --default-branch=${{ env.default_branch }} \
          --bump=${{ env.default_bump}} \
          --prerelease-suffix-length=${{ env.prerelease_suffix_length }} ${{ env.prerelease }} ${{ env.with_prefix }} ${{ env.test_mode }}
